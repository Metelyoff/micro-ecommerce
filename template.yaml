AWSTemplateFormatVersion: '2010-09-09'

Description: >
  This AWS CloudFormation template provisions a Virtual Private Cloud (VPC) with public and private subnets, 
  a NAT instance for private subnet internet access, and the necessary networking components like an internet gateway, 
  route tables, and associations. It also includes IAM roles and instance profiles for the NAT instance, 
  while enabling secure and isolated environments for different deployment stages (dev, staging, production).

Parameters:

  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, production]
    Description: Deployment environment

  DBUsername:
    Type: String
    Default: postgres
    Description: Database username

  DBPassword:
    Type: String
    Default: postgres
    Description: Database password

Resources:

  # VPC and Subnets
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-vpc"

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-public-subnet"
    DependsOn:
      - VPC

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-private-subnet"
    DependsOn:
      - VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-internet-gateway"

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
    DependsOn:
      - InternetGateway
      - VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-public-route-table"
    DependsOn:
      - VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn:
      - PublicRouteTable
      - InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
    DependsOn:
      - PublicSubnet
      - PublicRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstance
    DependsOn:
      - PrivateRouteTable
      - NATInstance

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
    DependsOn:
      - PrivateSubnet
      - PrivateRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-private-route-table"
    DependsOn:
      - VPC

  NATInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess

  NATInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref NATInstanceRole
    DependsOn:
      - NATInstanceRole

  NATInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0764af88874b6b852
      KeyName: !Sub "${Environment}-key-pair"
      IamInstanceProfile: !Ref NATInstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !Ref NATSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-nat-instance"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "Updating and installing dependencies..."
          yum update -y
          yum install -y iptables-services
          echo "Dependencies installed."

          echo "Enabling IP Forwarding..."
          echo 1 > /proc/sys/net/ipv4/ip_forward
          echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
          sysctl -p
          echo "IP Forwarding enabled"

          echo "Configuring NAT..."
          iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          service iptables save
          service iptables restart
          echo "NAT configured."

          echo "Disabling Source/Destination Check..."
          echo "Fetching EC2 instance ID..."
          for i in {1..5}; do
            TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
            INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
          
            if [[ -n "$INSTANCE_ID" ]]; then
              echo "Instance ID fetched: $INSTANCE_ID"
              echo "iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE" >> /etc/rc.local
              chmod +x /etc/rc.local
              aws ec2 modify-instance-attribute --instance-id $INSTANCE_ID --source-dest-check "{\"Value\": false}" --region ${AWS::Region}
              break
            fi
        
            echo "Retrying in 5 seconds..."
            sleep 5
          done
          
          if [[ -z "$INSTANCE_ID" ]]; then
            echo "ERROR: Unable to fetch instance ID!"
            exit 1
          fi
                  
          echo "NAT instance setup completed."
    DependsOn:
      - PublicSubnet
      - NATInstanceProfile
      - NATSecurityGroup

  NATElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATElasticIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref NATInstance
      AllocationId: !GetAtt NATElasticIP.AllocationId
    DependsOn:
      - NATInstance
      - NATElasticIP

  NATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow internet access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
    DependsOn:
      - VPC

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/ElasticLoadBalancingReadOnly
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref InstanceRole
    DependsOn:
      - InstanceRole

  # Kafka configurations
  KafkaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to Kafka brokers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 29093
          ToPort: 29093
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 29092
          ToPort: 29092
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
    DependsOn:
      - VPC

  KafkaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ec2/instance/${KafkaEC2Instance}"
      RetentionInDays: 3
    DependsOn:
      - KafkaEC2Instance

  KafkaEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0764af88874b6b852
      KeyName: !Sub "${Environment}-key-pair"
      SecurityGroupIds:
        - !Ref KafkaSecurityGroup
      SubnetId: !Ref PrivateSubnet
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-kafka-instance"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          INSTANCE_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
          echo "INSTANCE_IP=$INSTANCE_IP"
          
          yum update -y
          yum install -y docker amazon-ssm-agent aws-cli amazon-cloudwatch-agent
                    
          systemctl start amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          
          systemctl start docker
          systemctl enable docker
          
          docker pull apache/kafka:latest
          
          docker run -d \
          --restart always \
          --name kafka \
          -p 29092:29092 \
          -p 29093:29093 \
          -e KAFKA_BROKER_ID=1 \
          -e KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT \
          -e KAFKA_ADVERTISED_LISTENERS=INTERNAL://$INSTANCE_IP:29092 \
          -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
          -e KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0 \
          -e KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1 \
          -e KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1 \
          -e KAFKA_PROCESS_ROLES=broker,controller \
          -e KAFKA_NODE_ID=1 \
          -e KAFKA_CONTROLLER_QUORUM_VOTERS=1@$INSTANCE_IP:29093 \
          -e KAFKA_LISTENERS=INTERNAL://:29092,CONTROLLER://:29093 \
          -e KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL \
          -e KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER \
          -e KAFKA_HEAP_OPTS="-Xms512m -Xmx512m" \
          -e CLUSTER_ID=ecommerce \
          apache/kafka:latest
          
          echo "Configuring CloudWatch Logs..."
          TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
          echo "INSTANCE_ID=$INSTANCE_ID"
          if [[ -z "$DOCKER_CONTAINER_ID" ]]; then
            DOCKER_CONTAINER_ID="*"
          fi
          DOCKER_CONTAINER_ID=$(docker inspect kafka --format "{{.Id}}")
          echo "DOCKER_CONTAINER_ID=$DOCKER_CONTAINER_ID"
          mkdir -p /opt/aws/amazon-cloudwatch-agent/etc
          chown ec2-user:ec2-user /opt/aws/amazon-cloudwatch-agent/etc
          chmod 755 /opt/aws/amazon-cloudwatch-agent/etc
          sudo cat <<EOF | sudo tee /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json > /dev/null
          {
            "agent": {
              "metrics_collection_interval": 60,
              "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/cloud-init-output.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-cloud-init",
                      "timestamp_format": "%Y-%m-%d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-messages",
                      "timestamp_format": "%b %d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/docker.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-docker",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                    },
                    {
                      "file_path": "/var/lib/docker/containers/$DOCKER_CONTAINER_ID/$DOCKER_CONTAINER_ID-json.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "$INSTANCE_ID-$DOCKER_CONTAINER_ID-docker-container",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S.%fZ",
                      "multi_line_start_pattern": "{"
                    }
                  ]
                }
              }
            }
          }
          EOF
          echo "Starting CloudWatch Agent..."
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
          -a fetch-config \
          -m ec2 \
          -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
          -s
          echo "CloudWatch Logs configured successfully."
    DependsOn:
      - KafkaSecurityGroup
      - InstanceProfile
      - NATInstance

  KafkaUISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to Kafka UI
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 29092
          ToPort: 29092
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
    DependsOn:
      - VPC

  KafkaUILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ec2/instance/${KafkaUIEC2Instance}"
      RetentionInDays: 3
    DependsOn:
      - KafkaUIEC2Instance

  KafkaUIEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0764af88874b6b852
      KeyName: !Sub "${Environment}-key-pair"
      SecurityGroupIds:
        - !Ref KafkaUISecurityGroup
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-kafka-ui-instance"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y docker amazon-ssm-agent aws-cli amazon-cloudwatch-agent
                    
          systemctl start amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          
          systemctl start docker
          systemctl enable docker
                    
          echo "KafkaEC2Instance=${KafkaEC2Instance.PrivateDnsName}"
          
          docker pull provectuslabs/kafka-ui
          
          docker run -d \
          --restart always \
          --name kafka-ui \
          -p 80:8080 \
          -e KAFKA_CLUSTERS_0_NAME=ecommerce \
          -e DYNAMIC_CONFIG_ENABLED=true \
          -e KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=${KafkaEC2Instance.PrivateDnsName}:29092 \
          -e SPRING_PROFILES_ACTIVE=prod \
          provectuslabs/kafka-ui
          
          echo "Configuring CloudWatch Logs..."
          TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
          echo "INSTANCE_ID=$INSTANCE_ID"
          DOCKER_CONTAINER_ID=$(docker inspect kafka-ui --format "{{.Id}}")
          echo "DOCKER_CONTAINER_ID=$DOCKER_CONTAINER_ID"
          if [[ -z "$DOCKER_CONTAINER_ID" ]]; then
            DOCKER_CONTAINER_ID="*"
          fi
          mkdir -p /opt/aws/amazon-cloudwatch-agent/etc
          chown ec2-user:ec2-user /opt/aws/amazon-cloudwatch-agent/etc
          chmod 755 /opt/aws/amazon-cloudwatch-agent/etc
          sudo cat <<EOF | sudo tee /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json > /dev/null
          {
            "agent": {
              "metrics_collection_interval": 60,
              "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/cloud-init-output.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-cloud-init",
                      "timestamp_format": "%Y-%m-%d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-messages",
                      "timestamp_format": "%b %d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/docker.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-docker",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                    },
                    {
                      "file_path": "/var/lib/docker/containers/$DOCKER_CONTAINER_ID/$DOCKER_CONTAINER_ID-json.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "$INSTANCE_ID-$DOCKER_CONTAINER_ID-docker-container",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S.%fZ",
                      "multi_line_start_pattern": "{"
                    }
                  ]
                }
              }
            }
          }
          EOF
          echo "Starting CloudWatch Agent..."
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
          -a fetch-config \
          -m ec2 \
          -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
          -s
          echo "CloudWatch Logs configured successfully."
    DependsOn:
      - KafkaEC2Instance
      - KafkaUISecurityGroup
      - PublicSubnet
      - InstanceProfile

  # Postgresql configurations
  PostgreSQLSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to PostgreSQL database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
    DependsOn:
      - VPC

  InventoryPostgresLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ec2/instance/${InventoryPostgresEC2Instance}"
      RetentionInDays: 3
    DependsOn:
      - InventoryPostgresEC2Instance

  InventoryPostgresEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0764af88874b6b852
      KeyName: !Sub "${Environment}-key-pair"
      SecurityGroupIds:
        - !Ref PostgreSQLSecurityGroup
      SubnetId: !Ref PrivateSubnet
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-inventory-db-instance"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo "Start user data"
          
          yum update -y
          yum install -y docker amazon-ssm-agent aws-cli amazon-cloudwatch-agent
                    
          systemctl start amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          
          systemctl start docker
          systemctl enable docker
          
          usermod -a -G docker ec2-user

          aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
          
          docker pull --platform linux/amd64 ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/micro-ecommerce-inventory-service-db:latest
          echo "Pulled image"
          
          docker run -d \
          --platform linux/amd64 \
          --restart always \
          --name micro-ecommerce-inventory-service-db \
          -p 5432:5432 \
          -e POSTGRES_USER=${DBUsername} \
          -e POSTGRES_PASSWORD=${DBPassword} \
          -e POSTGRES_DB=inventory_service_db \
          ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/micro-ecommerce-inventory-service-db:latest
          
          echo "Configuring CloudWatch Logs..."
          TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
          echo "INSTANCE_ID=$INSTANCE_ID"
          DOCKER_CONTAINER_ID=$(docker inspect micro-ecommerce-inventory-service-db --format "{{.Id}}")
          echo "DOCKER_CONTAINER_ID=$DOCKER_CONTAINER_ID"
          if [[ -z "$DOCKER_CONTAINER_ID" ]]; then
            DOCKER_CONTAINER_ID="*"
          fi
          mkdir -p /opt/aws/amazon-cloudwatch-agent/etc
          chown ec2-user:ec2-user /opt/aws/amazon-cloudwatch-agent/etc
          chmod 755 /opt/aws/amazon-cloudwatch-agent/etc
          sudo cat <<EOF | sudo tee /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json > /dev/null
          {
            "agent": {
              "metrics_collection_interval": 60,
              "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/cloud-init-output.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-cloud-init",
                      "timestamp_format": "%Y-%m-%d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-messages",
                      "timestamp_format": "%b %d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/docker.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-docker",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                    },
                    {
                      "file_path": "/var/lib/docker/containers/$DOCKER_CONTAINER_ID/$DOCKER_CONTAINER_ID-json.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "$INSTANCE_ID-$DOCKER_CONTAINER_ID-docker-container",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S.%fZ",
                      "multi_line_start_pattern": "{"
                    }
                  ]
                }
              }
            }
          }
          EOF
          echo "Starting CloudWatch Agent..."
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
          -a fetch-config \
          -m ec2 \
          -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
          -s
          echo "CloudWatch Logs configured successfully."
    DependsOn:
      - PostgreSQLSecurityGroup
      - PrivateSubnet
      - InstanceProfile
      - NATInstance

  OrderPostgresLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ec2/instance/${OrderPostgresEC2Instance}"
      RetentionInDays: 3
    DependsOn:
      - OrderPostgresEC2Instance

  OrderPostgresEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0764af88874b6b852
      KeyName: !Sub "${Environment}-key-pair"
      SecurityGroupIds:
        - !Ref PostgreSQLSecurityGroup
      SubnetId: !Ref PrivateSubnet
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-order-db-instance"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo "Start user data"
          
          yum update -y
          yum install -y docker amazon-ssm-agent aws-cli amazon-cloudwatch-agent
                    
          systemctl start amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          
          systemctl start docker
          systemctl enable docker
          
          usermod -a -G docker ec2-user
          
          aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
          
          docker pull --platform linux/amd64 ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/micro-ecommerce-order-service-db:latest
          echo "Pulled image"
          
          docker run -d \
          --restart always \
          --platform linux/amd64 \
          --name micro-ecommerce-order-service-db \
          -p 5432:5432 \
          -e POSTGRES_USER=${DBUsername} \
          -e POSTGRES_PASSWORD=${DBPassword} \
          -e POSTGRES_DB=order_service_db \
          ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/micro-ecommerce-order-service-db:latest
          
          echo "Configuring CloudWatch Logs..."
          TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
          echo "INSTANCE_ID=$INSTANCE_ID"
          DOCKER_CONTAINER_ID=$(docker inspect micro-ecommerce-order-service-db --format "{{.Id}}")
          echo "DOCKER_CONTAINER_ID=$DOCKER_CONTAINER_ID"
          if [[ -z "$DOCKER_CONTAINER_ID" ]]; then
            DOCKER_CONTAINER_ID="*"
          fi
          mkdir -p /opt/aws/amazon-cloudwatch-agent/etc
          chown ec2-user:ec2-user /opt/aws/amazon-cloudwatch-agent/etc
          chmod 755 /opt/aws/amazon-cloudwatch-agent/etc
          sudo cat <<EOF | sudo tee /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json > /dev/null
          {
            "agent": {
              "metrics_collection_interval": 60,
              "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/cloud-init-output.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-cloud-init",
                      "timestamp_format": "%Y-%m-%d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-messages",
                      "timestamp_format": "%b %d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/docker.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-docker",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                    },
                    {
                      "file_path": "/var/lib/docker/containers/$DOCKER_CONTAINER_ID/$DOCKER_CONTAINER_ID-json.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "$INSTANCE_ID-$DOCKER_CONTAINER_ID-docker-container",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S.%fZ",
                      "multi_line_start_pattern": "{"
                    }
                  ]
                }
              }
            }
          }
          EOF
          echo "Starting CloudWatch Agent..."
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
          -a fetch-config \
          -m ec2 \
          -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
          -s
          echo "CloudWatch Logs configured successfully."
    DependsOn:
      - PostgreSQLSecurityGroup
      - PrivateSubnet
      - InstanceProfile
      - NATInstance

  PaymentPostgresLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ec2/instance/${PaymentPostgresEC2Instance}"
      RetentionInDays: 3
    DependsOn:
      - PaymentPostgresEC2Instance

  PaymentPostgresEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0764af88874b6b852
      KeyName: !Sub "${Environment}-key-pair"
      SecurityGroupIds:
        - !Ref PostgreSQLSecurityGroup
      SubnetId: !Ref PrivateSubnet
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-payment-db-instance"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo "Start user data"
          
          yum update -y
          yum install -y docker amazon-ssm-agent aws-cli amazon-cloudwatch-agent
                    
          systemctl start amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          
          systemctl start docker
          systemctl enable docker
          
          usermod -a -G docker ec2-user
          
          aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
          
          docker pull --platform linux/amd64 ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/micro-ecommerce-payment-service-db:latest
          echo "Pulled image"
          
          docker run -d \
          --restart always \
          --platform linux/amd64 \
          --name micro-ecommerce-payment-service-db \
          -p 5432:5432 \
          -e POSTGRES_USER=${DBUsername} \
          -e POSTGRES_PASSWORD=${DBPassword} \
          -e POSTGRES_DB=payment_service_db \
          ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/micro-ecommerce-payment-service-db:latest
          
          echo "Configuring CloudWatch Logs..."
          TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
          echo "INSTANCE_ID=$INSTANCE_ID"
          DOCKER_CONTAINER_ID=$(docker inspect micro-ecommerce-payment-service-db --format "{{.Id}}")
          echo "DOCKER_CONTAINER_ID=$DOCKER_CONTAINER_ID"
          if [[ -z "$DOCKER_CONTAINER_ID" ]]; then
            DOCKER_CONTAINER_ID="*"
          fi
          mkdir -p /opt/aws/amazon-cloudwatch-agent/etc
          chown ec2-user:ec2-user /opt/aws/amazon-cloudwatch-agent/etc
          chmod 755 /opt/aws/amazon-cloudwatch-agent/etc
          sudo cat <<EOF | sudo tee /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json > /dev/null
          {
            "agent": {
              "metrics_collection_interval": 60,
              "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/cloud-init-output.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-cloud-init",
                      "timestamp_format": "%Y-%m-%d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-messages",
                      "timestamp_format": "%b %d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/docker.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-docker",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                    },
                    {
                      "file_path": "/var/lib/docker/containers/$DOCKER_CONTAINER_ID/$DOCKER_CONTAINER_ID-json.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "$INSTANCE_ID-$DOCKER_CONTAINER_ID-docker-container",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S.%fZ",
                      "multi_line_start_pattern": "{"
                    }
                  ]
                }
              }
            }
          }
          EOF
          echo "Starting CloudWatch Agent..."
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
          -a fetch-config \
          -m ec2 \
          -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
          -s
          echo "CloudWatch Logs configured successfully."
    DependsOn:
      - PostgreSQLSecurityGroup
      - PrivateSubnet
      - InstanceProfile
      - NATInstance

  # Debezium configurations
  DebeziumSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to Debezium
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 29092
          ToPort: 29092
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
    DependsOn:
      - VPC

  DebeziumLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ec2/instance/${DebeziumEC2Instance}"
      RetentionInDays: 3
    DependsOn:
      - DebeziumEC2Instance

  DebeziumEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0764af88874b6b852
      KeyName: !Sub "${Environment}-key-pair"
      SecurityGroupIds:
        - !Ref DebeziumSecurityGroup
      SubnetId: !Ref PrivateSubnet
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-debezium-instance"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y docker amazon-ssm-agent aws-cli amazon-cloudwatch-agent
                    
          systemctl start amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          
          systemctl start docker
          systemctl enable docker
                              
          docker pull debezium/connect:2.3
          
          docker run -d \
          --name debezium \
          -p 80:8083 \
          -e BOOTSTRAP_SERVERS=${KafkaEC2Instance.PrivateDnsName}:29092 \
          -e GROUP_ID=1 \
          -e CONFIG_STORAGE_TOPIC=debezium_config \
          -e OFFSET_STORAGE_TOPIC=debezium_offsets \
          -e STATUS_STORAGE_TOPIC=debezium_status \
          -e KEY_CONVERTER_SCHEMAS_ENABLE=false \
          -e VALUE_CONVERTER_SCHEMAS_ENABLE=false \
          -e CONNECT_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter \
          -e CONNECT_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter \
          --restart always \
          --health-cmd="curl -f http://localhost:8083/" \
          --health-interval=10s \
          --health-timeout=5s \
          --health-retries=3 \
          debezium/connect:2.3
          
          echo "Configuring CloudWatch Logs..."
          TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
          echo "INSTANCE_ID=$INSTANCE_ID"
          DOCKER_CONTAINER_ID=$(docker inspect debezium --format "{{.Id}}")
          echo "DOCKER_CONTAINER_ID=$DOCKER_CONTAINER_ID"
          if [[ -z "$DOCKER_CONTAINER_ID" ]]; then
            DOCKER_CONTAINER_ID="*"
          fi
          mkdir -p /opt/aws/amazon-cloudwatch-agent/etc
          chown ec2-user:ec2-user /opt/aws/amazon-cloudwatch-agent/etc
          chmod 755 /opt/aws/amazon-cloudwatch-agent/etc
          sudo cat <<EOF | sudo tee /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json > /dev/null
          {
            "agent": {
              "metrics_collection_interval": 60,
              "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/cloud-init-output.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-cloud-init",
                      "timestamp_format": "%Y-%m-%d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-messages",
                      "timestamp_format": "%b %d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/docker.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-docker",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                    },
                    {
                      "file_path": "/var/lib/docker/containers/$DOCKER_CONTAINER_ID/$DOCKER_CONTAINER_ID-json.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "$INSTANCE_ID-$DOCKER_CONTAINER_ID-docker-container",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S.%fZ",
                      "multi_line_start_pattern": "{"
                    }
                  ]
                }
              }
            }
          }
          EOF
          echo "Starting CloudWatch Agent..."
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
          -a fetch-config \
          -m ec2 \
          -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
          -s
          echo "CloudWatch Logs configured successfully."
          
          echo "Waiting for Debezium container to become healthy..."
          while :
            do
            HEALTH_STATUS=$(docker inspect --format='{{json .State.Health.Status}}' debezium 2>/dev/null | tr -d '"')
            if [[ "$HEALTH_STATUS" == "healthy" ]]; then
              echo "Debezium container is healthy. Initialize DB connectors..."
              echo "Initialize inventory connector"
              curl -X POST -H 'Content-Type: application/json' --data '{
                "name": "inventory-service-connector",
                "config": {
                  "connector.class": "io.debezium.connector.postgresql.PostgresConnector",
                  "tasks.max": "1",
                  "database.hostname": "${InventoryPostgresEC2Instance.PrivateDnsName}",
                  "database.port": "5432",
                  "database.user": "${DBUsername}",
                  "database.password": "${DBPassword}",
                  "database.dbname": "inventory_service_db",
                  "database.server.name": "inventory_service",
                  "plugin.name": "pgoutput",
                  "slot.name": "debezium_slot",
                  "topic.prefix": "inventory-service",
                  "key.converter": "org.apache.kafka.connect.json.JsonConverter",
                  "value.converter": "org.apache.kafka.connect.json.JsonConverter",
                  "value.converter.schemas.enable": "false",
                  "decimal.handling.mode": "string",
                  "include.transaction": true,
                  "after.state.only": "true",
                  "transforms": "unwrap",
                  "transforms.unwrap.type": "io.debezium.transforms.ExtractNewRecordState",
                  "transforms.unwrap.drop.tombstones": "true",
                  "table.include.list": "public.outbox_events"
                }
              }' http://localhost/connectors
              
              echo "Initialize payment connector"
              curl -X POST -H 'Content-Type: application/json' --data '{
                "name": "payment-service-connector",
                "config": {
                  "connector.class": "io.debezium.connector.postgresql.PostgresConnector",
                  "tasks.max": "1",
                  "database.hostname": "${PaymentPostgresEC2Instance.PrivateDnsName}",
                  "database.port": "5432",
                  "database.user": "${DBUsername}",
                  "database.password": "${DBPassword}",
                  "database.dbname": "payment_service_db",
                  "database.server.name": "payment_service",
                  "plugin.name": "pgoutput",
                  "slot.name": "debezium_slot",
                  "topic.prefix": "payment-service",
                  "key.converter": "org.apache.kafka.connect.json.JsonConverter",
                  "value.converter": "org.apache.kafka.connect.json.JsonConverter",
                  "value.converter.schemas.enable": "false",
                  "decimal.handling.mode": "string",
                  "include.transaction": true,
                  "after.state.only": "true",
                  "transforms": "unwrap",
                  "transforms.unwrap.type": "io.debezium.transforms.ExtractNewRecordState",
                  "transforms.unwrap.drop.tombstones": "true",
                  "table.include.list": "public.outbox_events"
                }
              }' http://localhost/connectors
              
              echo "Initialize order connector"
              curl -X POST -H 'Content-Type: application/json' --data '{
                "name": "order-service-connector",
                "config": {
                  "connector.class": "io.debezium.connector.postgresql.PostgresConnector",
                  "tasks.max": "1",
                  "database.hostname": "${OrderPostgresEC2Instance.PrivateDnsName}",
                  "database.port": "5432",
                  "database.user": "${DBUsername}",
                  "database.password": "${DBPassword}",
                  "database.dbname": "order_service_db",
                  "database.server.name": "order_service",
                  "plugin.name": "pgoutput",
                  "slot.name": "debezium_slot",
                  "topic.prefix": "order-service",
                  "key.converter": "org.apache.kafka.connect.json.JsonConverter",
                  "value.converter": "org.apache.kafka.connect.json.JsonConverter",
                  "value.converter.schemas.enable": "false",
                  "decimal.handling.mode": "string",
                  "include.transaction": true,
                  "after.state.only": "true",
                  "transforms": "unwrap",
                  "transforms.unwrap.type": "io.debezium.transforms.ExtractNewRecordState",
                  "transforms.unwrap.drop.tombstones": "true",
                  "table.include.list": "public.outbox_events"
                }
              }' http://localhost/connectors
              echo "All connectors initialized"
              break
            else
              echo "Current health status: $HEALTH_STATUS"
              sleep 5
            fi
          done
    DependsOn:
      - DebeziumSecurityGroup
      - PrivateSubnet
      - InstanceProfile
      - OrderPostgresEC2Instance
      - InventoryPostgresEC2Instance
      - PaymentPostgresEC2Instance
      - NATInstance

  DebeziumUISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to Debezium UI
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
    DependsOn:
      - VPC

  DebeziumUILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ec2/instance/${DebeziumUIEC2Instance}"
      RetentionInDays: 3
    DependsOn:
      - DebeziumUIEC2Instance

  DebeziumUIEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0764af88874b6b852
      KeyName: !Sub "${Environment}-key-pair"
      SecurityGroupIds:
        - !Ref DebeziumUISecurityGroup
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-debezium-ui-instance"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y docker amazon-cloudwatch-agent
          service docker start
          echo "DebeziumEC2Instance=${DebeziumEC2Instance.PrivateDnsName}"
          docker pull debezium/debezium-ui
          docker run -d \
          --restart always \
          --name debezium-ui \
          -p 80:8080 \
          -e KAFKA_CONNECT_URIS=http://${DebeziumEC2Instance.PrivateDnsName}:80 \
          --health-cmd="curl -f http://localhost:8080/" \
          --health-interval=5s \
          --health-timeout=5s \
          --health-retries=3 \
          debezium/debezium-ui
          
          echo "Configuring CloudWatch Logs..."
          TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
          echo "INSTANCE_ID=$INSTANCE_ID"
          DOCKER_CONTAINER_ID=$(docker inspect debezium-ui --format "{{.Id}}")
          echo "DOCKER_CONTAINER_ID=$DOCKER_CONTAINER_ID"
          if [[ -z "$DOCKER_CONTAINER_ID" ]]; then
            DOCKER_CONTAINER_ID="*"
          fi
          mkdir -p /opt/aws/amazon-cloudwatch-agent/etc
          chown ec2-user:ec2-user /opt/aws/amazon-cloudwatch-agent/etc
          chmod 755 /opt/aws/amazon-cloudwatch-agent/etc
          sudo cat <<EOF | sudo tee /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json > /dev/null
          {
            "agent": {
              "metrics_collection_interval": 60,
              "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/cloud-init-output.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-cloud-init",
                      "timestamp_format": "%Y-%m-%d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-messages",
                      "timestamp_format": "%b %d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/docker.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-docker",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                    },
                    {
                      "file_path": "/var/lib/docker/containers/$DOCKER_CONTAINER_ID/$DOCKER_CONTAINER_ID-json.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "$INSTANCE_ID-$DOCKER_CONTAINER_ID-docker-container",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S.%fZ",
                      "multi_line_start_pattern": "{"
                    }
                  ]
                }
              }
            }
          }
          EOF
          echo "Starting CloudWatch Agent..."
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
          -a fetch-config \
          -m ec2 \
          -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
          -s
          echo "CloudWatch Logs configured successfully."
    DependsOn:
      - DebeziumUISecurityGroup
      - PublicSubnet
      - InstanceProfile
      - DebeziumEC2Instance
      - NATInstance

  # Services configurations
  OrderServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to Order service
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 29092
          ToPort: 29092
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
    DependsOn:
      - VPC

  OrderServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ec2/instance/${OrderServiceEC2Instance}"
      RetentionInDays: 3
    DependsOn:
      - OrderServiceEC2Instance

  OrderServiceEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0764af88874b6b852
      KeyName: !Sub "${Environment}-key-pair"
      SecurityGroupIds:
        - !Ref OrderServiceSecurityGroup
      SubnetId: !Ref PrivateSubnet
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-order-service-instance"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo "Start user data"
          
          yum update -y
          yum install -y docker amazon-ssm-agent aws-cli amazon-cloudwatch-agent
                    
          systemctl start amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          
          systemctl start docker
          systemctl enable docker
          
          usermod -a -G docker ec2-user
          
          aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
          
          docker pull --platform linux/amd64 ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/micro-ecommerce-order-service:latest
          echo "Image pulled"
          
          docker run -d \
          --restart always \
          --platform linux/amd64 \
          --name micro-ecommerce-order-service \
          -p 80:8080 \
          -e DATABASE_URL=jdbc:postgresql://${OrderPostgresEC2Instance.PrivateDnsName}:5432/order_service_db \
          -e DATABASE_USERNAME=${DBUsername} \
          -e DATABASE_PASSWORD=${DBPassword} \
          -e KAFKA_URI=${KafkaEC2Instance.PrivateDnsName}:29092 \
          -e DEBEZIUM_DESTINATION=order-service.public.outbox_events \
          -e OUTBOX_TOPICS=payment-service.public.outbox_events,inventory-service.public.outbox_events \
          --health-cmd="curl -f http://localhost:8080/actuator/health" \
          --health-interval=5s \
          --health-timeout=5s \
          --health-retries=3 \
          ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/micro-ecommerce-order-service:latest
          
          echo "Configuring CloudWatch Logs..."
          TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
          echo "INSTANCE_ID=$INSTANCE_ID"
          DOCKER_CONTAINER_ID=$(docker inspect micro-ecommerce-order-service --format "{{.Id}}")
          echo "DOCKER_CONTAINER_ID=$DOCKER_CONTAINER_ID"
          if [[ -z "$DOCKER_CONTAINER_ID" ]]; then
            DOCKER_CONTAINER_ID="*"
          fi
          mkdir -p /opt/aws/amazon-cloudwatch-agent/etc
          chown ec2-user:ec2-user /opt/aws/amazon-cloudwatch-agent/etc
          chmod 755 /opt/aws/amazon-cloudwatch-agent/etc
          sudo cat <<EOF | sudo tee /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json > /dev/null
          {
            "agent": {
              "metrics_collection_interval": 60,
              "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/cloud-init-output.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-cloud-init",
                      "timestamp_format": "%Y-%m-%d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-messages",
                      "timestamp_format": "%b %d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/docker.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-docker",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                    },
                    {
                      "file_path": "/var/lib/docker/containers/$DOCKER_CONTAINER_ID/$DOCKER_CONTAINER_ID-json.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "$INSTANCE_ID-$DOCKER_CONTAINER_ID-docker-container",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S.%fZ",
                      "multi_line_start_pattern": "{"
                    }
                  ]
                }
              }
            }
          }
          EOF
          echo "Starting CloudWatch Agent..."
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
          -a fetch-config \
          -m ec2 \
          -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
          -s
          echo "CloudWatch Logs configured successfully."
    DependsOn:
      - OrderServiceSecurityGroup
      - PrivateSubnet
      - InstanceProfile
      - OrderPostgresEC2Instance
      - KafkaEC2Instance
      - DebeziumEC2Instance
      - NATInstance

  PaymentServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to Payment service
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 29092
          ToPort: 29092
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
    DependsOn:
      - VPC

  PaymentServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ec2/instance/${PaymentServiceEC2Instance}"
      RetentionInDays: 3
    DependsOn:
      - PaymentServiceEC2Instance

  PaymentServiceEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0764af88874b6b852
      KeyName: !Sub "${Environment}-key-pair"
      SecurityGroupIds:
        - !Ref PaymentServiceSecurityGroup
      SubnetId: !Ref PrivateSubnet
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-payment-service-instance"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo "Start user data"
          
          yum update -y
          yum install -y docker amazon-ssm-agent aws-cli amazon-cloudwatch-agent
                    
          systemctl start amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          
          systemctl start docker
          systemctl enable docker
          
          usermod -a -G docker ec2-user
          
          aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
          
          docker pull --platform linux/amd64 ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/micro-ecommerce-payment-service:latest
          echo "Image pulled"
          
          docker run -d \
          --restart always \
          --platform linux/amd64 \
          --name micro-ecommerce-payment-service \
          -p 80:8080 \
          -e DATABASE_URL=jdbc:postgresql://${PaymentPostgresEC2Instance.PrivateDnsName}:5432/payment_service_db \
          -e DATABASE_USERNAME=${DBUsername} \
          -e DATABASE_PASSWORD=${DBPassword} \
          -e KAFKA_URI=${KafkaEC2Instance.PrivateDnsName}:29092 \
          -e DEBEZIUM_DESTINATION=payment-service.public.outbox_events \
          -e OUTBOX_TOPICS=order-service.public.outbox_events,inventory-service.public.outbox_events \
          -e EXPIRE_DELAY_MILLIS=60000 \
          --health-cmd="curl -f http://localhost:8080/actuator/health" \
          --health-interval=5s \
          --health-timeout=5s \
          --health-retries=3 \
          ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/micro-ecommerce-payment-service:latest
          
          echo "Configuring CloudWatch Logs..."
          TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
          echo "INSTANCE_ID=$INSTANCE_ID"
          DOCKER_CONTAINER_ID=$(docker inspect micro-ecommerce-payment-service --format "{{.Id}}")
          echo "DOCKER_CONTAINER_ID=$DOCKER_CONTAINER_ID"
          if [[ -z "$DOCKER_CONTAINER_ID" ]]; then
            DOCKER_CONTAINER_ID="*"
          fi
          mkdir -p /opt/aws/amazon-cloudwatch-agent/etc
          chown ec2-user:ec2-user /opt/aws/amazon-cloudwatch-agent/etc
          chmod 755 /opt/aws/amazon-cloudwatch-agent/etc
          sudo cat <<EOF | sudo tee /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json > /dev/null
          {
            "agent": {
              "metrics_collection_interval": 60,
              "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/cloud-init-output.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-cloud-init",
                      "timestamp_format": "%Y-%m-%d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-messages",
                      "timestamp_format": "%b %d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/docker.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-docker",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                    },
                    {
                      "file_path": "/var/lib/docker/containers/$DOCKER_CONTAINER_ID/$DOCKER_CONTAINER_ID-json.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "$INSTANCE_ID-$DOCKER_CONTAINER_ID-docker-container",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S.%fZ",
                      "multi_line_start_pattern": "{"
                    }
                  ]
                }
              }
            }
          }
          EOF
          echo "Starting CloudWatch Agent..."
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
          -a fetch-config \
          -m ec2 \
          -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
          -s
          echo "CloudWatch Logs configured successfully."
    DependsOn:
      - PaymentServiceSecurityGroup
      - PrivateSubnet
      - InstanceProfile
      - PaymentPostgresEC2Instance
      - KafkaEC2Instance
      - DebeziumEC2Instance
      - NATInstance

  InventoryServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to Inventory service
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 29092
          ToPort: 29092
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
    DependsOn:
      - VPC

  InventoryServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ec2/instance/${InventoryServiceEC2Instance}"
      RetentionInDays: 3
    DependsOn:
      - InventoryServiceEC2Instance

  InventoryServiceEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0764af88874b6b852
      KeyName: !Sub "${Environment}-key-pair"
      SecurityGroupIds:
        - !Ref InventoryServiceSecurityGroup
      SubnetId: !Ref PrivateSubnet
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-inventory-service-instance"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo "Start user data"
          
          yum update -y
          yum install -y docker amazon-ssm-agent aws-cli amazon-cloudwatch-agent
                    
          systemctl start amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          
          systemctl start docker
          systemctl enable docker
          
          usermod -a -G docker ec2-user
          
          aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
          
          docker pull --platform linux/amd64 ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/micro-ecommerce-inventory-service:latest
          echo "Image pulled"
          
          docker run -d \
          --restart always \
          --platform linux/amd64 \
          --name micro-ecommerce-inventory-service \
          -p 80:8080 \
          -e DATABASE_URL=jdbc:postgresql://${InventoryPostgresEC2Instance.PrivateDnsName}:5432/inventory_service_db \
          -e DATABASE_USERNAME=${DBUsername} \
          -e DATABASE_PASSWORD=${DBPassword} \
          -e KAFKA_URI=${KafkaEC2Instance.PrivateDnsName}:29092 \
          -e DEBEZIUM_DESTINATION=inventory-service.public.outbox_events \
          -e OUTBOX_TOPICS=payment-service.public.outbox_events,order-service.public.outbox_events \
          --health-cmd="curl -f http://localhost:8080/actuator/health" \
          --health-interval=5s \
          --health-timeout=5s \
          --health-retries=3 \
          ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/micro-ecommerce-inventory-service:latest
          
          echo "Configuring CloudWatch Logs..."
          TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
          echo "INSTANCE_ID=$INSTANCE_ID"
          DOCKER_CONTAINER_ID=$(docker inspect micro-ecommerce-inventory-service --format "{{.Id}}")
          echo "DOCKER_CONTAINER_ID=$DOCKER_CONTAINER_ID"
          if [[ -z "$DOCKER_CONTAINER_ID" ]]; then
            DOCKER_CONTAINER_ID="*"
          fi
          mkdir -p /opt/aws/amazon-cloudwatch-agent/etc
          chown ec2-user:ec2-user /opt/aws/amazon-cloudwatch-agent/etc
          chmod 755 /opt/aws/amazon-cloudwatch-agent/etc
          sudo cat <<EOF | sudo tee /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json > /dev/null
          {
            "agent": {
              "metrics_collection_interval": 60,
              "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/cloud-init-output.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-cloud-init",
                      "timestamp_format": "%Y-%m-%d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-messages",
                      "timestamp_format": "%b %d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/docker.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-docker",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                    },
                    {
                      "file_path": "/var/lib/docker/containers/$DOCKER_CONTAINER_ID/$DOCKER_CONTAINER_ID-json.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "$INSTANCE_ID-$DOCKER_CONTAINER_ID-docker-container",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S.%fZ",
                      "multi_line_start_pattern": "{"
                    }
                  ]
                }
              }
            }
          }
          EOF
          echo "Starting CloudWatch Agent..."
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
          -a fetch-config \
          -m ec2 \
          -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
          -s
          echo "CloudWatch Logs configured successfully."
    DependsOn:
      - InventoryServiceSecurityGroup
      - PrivateSubnet
      - InstanceProfile
      - InventoryPostgresEC2Instance
      - KafkaEC2Instance
      - DebeziumEC2Instance
      - NATInstance

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to Web UI
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
    DependsOn:
      - VPC

  WebLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ec2/instance/${WebEC2Instance}"
      RetentionInDays: 3
    DependsOn:
      - WebEC2Instance

  WebEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0764af88874b6b852
      KeyName: !Sub "${Environment}-key-pair"
      SecurityGroupIds:
        - !Ref WebSecurityGroup
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-web-instance"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          
          yum update -y
          yum install -y docker amazon-ssm-agent aws-cli amazon-cloudwatch-agent
          
          systemctl start amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          
          systemctl start docker
          systemctl enable docker
          
          usermod -a -G docker ec2-user
          
          aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
          
          echo "InventoryServiceEC2Instance=${InventoryServiceEC2Instance.PrivateDnsName}"
          echo "PaymentServiceEC2Instance=${PaymentServiceEC2Instance.PrivateDnsName}"
          echo "OrderServiceEC2Instance=${OrderServiceEC2Instance.PrivateDnsName}"
          PUBLIC_DNS=$(curl -s http://169.254.169.254/latest/meta-data/public-hostname)
          echo "PUBLIC_DNS $PUBLIC_DNS"
          
          docker pull --platform linux/amd64 ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/micro-ecommerce-web
          
          docker run -d \
          --restart always \
          --platform linux/amd64 \
          --name micro-ecommerce-web \
          -p 80:80 \
          -e REACT_APP_PRODUCTS_API_URL=http://$PUBLIC_DNS/api \
          -e REACT_APP_ORDERS_API_URL=http://$PUBLIC_DNS/api \
          -e REACT_APP_PAYMENTS_API_URL=http://$PUBLIC_DNS/api \
          -e BACKEND_PRODUCTS_API_URL=http://${InventoryServiceEC2Instance.PrivateDnsName} \
          -e BACKEND_ORDERS_API_URL=http://${OrderServiceEC2Instance.PrivateDnsName} \
          -e BACKEND_PAYMENTS_API_URL=http://${PaymentServiceEC2Instance.PrivateDnsName} \
          --restart always \
          --health-cmd="curl -f http://localhost/" \
          --health-interval=5s \
          --health-timeout=5s \
          --health-retries=3 \
          ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/micro-ecommerce-web
          
          echo "Configuring CloudWatch Logs..."
          TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
          echo "INSTANCE_ID=$INSTANCE_ID"
          DOCKER_CONTAINER_ID=$(docker inspect micro-ecommerce-web --format "{{.Id}}")
          echo "DOCKER_CONTAINER_ID=$DOCKER_CONTAINER_ID"
          if [[ -z "$DOCKER_CONTAINER_ID" ]]; then
            DOCKER_CONTAINER_ID="*"
          fi
          mkdir -p /opt/aws/amazon-cloudwatch-agent/etc
          chown ec2-user:ec2-user /opt/aws/amazon-cloudwatch-agent/etc
          chmod 755 /opt/aws/amazon-cloudwatch-agent/etc
          sudo cat <<EOF | sudo tee /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json > /dev/null
          {
            "agent": {
              "metrics_collection_interval": 60,
              "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/cloud-init-output.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-cloud-init",
                      "timestamp_format": "%Y-%m-%d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-messages",
                      "timestamp_format": "%b %d %H:%M:%S"
                    },
                    {
                      "file_path": "/var/log/docker.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "{instance_id}-docker",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                    },
                    {
                      "file_path": "/var/lib/docker/containers/$DOCKER_CONTAINER_ID/$DOCKER_CONTAINER_ID-json.log",
                      "log_group_name": "/ec2/instance/$INSTANCE_ID",
                      "log_stream_name": "$INSTANCE_ID-$DOCKER_CONTAINER_ID-docker-container",
                      "timestamp_format": "%Y-%m-%dT%H:%M:%S.%fZ",
                      "multi_line_start_pattern": "{"
                    }
                  ]
                }
              }
            }
          }
          EOF
          echo "Starting CloudWatch Agent..."
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
          -a fetch-config \
          -m ec2 \
          -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
          -s
          echo "CloudWatch Logs configured successfully."
    DependsOn:
      - WebSecurityGroup
      - PublicSubnet
      - InstanceProfile
      - OrderServiceEC2Instance
      - PaymentServiceEC2Instance
      - InventoryServiceEC2Instance

Outputs:

  KafkaInstancePrivateDNS:
    Description: Kafka private DNS name
    Value: !GetAtt KafkaEC2Instance.PrivateDnsName

  KafkaUIPublicDNS:
    Description: Kafka UI public DNS name
    Value: !GetAtt KafkaUIEC2Instance.PublicDnsName
  
  InventoryPostgresPrivateDNS:
    Description: Private DNS name of the Inventory PostgreSQL Database
    Value: !GetAtt InventoryPostgresEC2Instance.PrivateDnsName
  
  OrderPostgresPrivateDNS:
    Description: Private DNS name of the Order PostgreSQL Database
    Value: !GetAtt OrderPostgresEC2Instance.PrivateDnsName

  PaymentPostgresPrivateDNS:
    Description: Private DNS name of the Payment PostgreSQL Database
    Value: !GetAtt PaymentPostgresEC2Instance.PrivateDnsName

  DebeziumPrivateDNS:
    Description: Private DNS name of the Debezium Service
    Value: !GetAtt DebeziumEC2Instance.PrivateDnsName

  DebeziumUIPublicDNS:
    Description: Public DNS name of the Debezium UI EC2 Instance
    Value: !GetAtt DebeziumUIEC2Instance.PublicDnsName

  InventoryServicePrivateDNS:
    Description: Private DNS name of the Inventory Service EC2 Instance
    Value: !GetAtt InventoryServiceEC2Instance.PrivateDnsName

  OrderServicePrivateDNS:
    Description: Private DNS name of the Order Service EC2 Instance
    Value: !GetAtt OrderServiceEC2Instance.PrivateDnsName

  PaymentServicePrivateDNS:
    Description: Private DNS name of the Payment Service EC2 Instance
    Value: !GetAtt PaymentServiceEC2Instance.PrivateDnsName

  WebInstancePublicDNS:
    Description: Public DNS name of the Web EC2 Instance
    Value: !GetAtt WebEC2Instance.PublicDnsName
