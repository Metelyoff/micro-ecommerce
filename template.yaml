AWSTemplateFormatVersion: '2010-09-09'
Description: Kafka deployment to AWS ECS using EC2 instances for Free Tier.

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, production]
    Description: Deployment environment

Resources:

  # VPC and Subnets
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-vpc"

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-public-subnet"

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-private-subnet"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-internet-gateway"

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-public-route-table"
#    DependsOn:
#      - InternetGateway

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet
      AllocationId: !GetAtt PublicElasticIP.AllocationId
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-nat-gateway"
#    DependsOn:
#      - PublicSubnet
#      - PublicElasticIP

  PublicElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-private-route-table"
#    DependsOn:
#      - NATGateway

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  KafkaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to Kafka brokers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 29093
          ToPort: 29093
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 29092
          ToPort: 29092
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
#    DependsOn:
#      - VPC

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref ECSRole
#    DependsOn:
#      - ECSRole

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet
      LaunchTemplate:
        LaunchTemplateId: !Ref ECSLaunchTemplate
        Version: !GetAtt ECSLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-ecs-asg"
          PropagateAtLaunch: true
#    DependsOn:
#      - ECSLaunchTemplate

  ECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${Environment}-kafka-launch-template"
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: !Sub "{{resolve:ssm:/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id}}"
#        ImageId: ami-0741902214f4a7204
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            SubnetId: !Ref PublicSubnet
            Groups:
              - !Ref KafkaSecurityGroup
        IamInstanceProfile:
          Name: !Ref ECSInstanceProfile
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ContainerInstances --configsets full_install --region ${AWS::Region} &
        MetadataOptions:
          HttpEndpoint: enabled
          HttpTokens: required
#    DependsOn:
#      - PublicSubnet
#      - KafkaSecurityGroup
#      - ECSInstanceProfile

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${Environment}-kafka-cluster"

  KafkaTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${Environment}-kafka"
#      NetworkMode: awsvpc
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      Cpu: "512"
      Memory: "512"
      ContainerDefinitions:
        - Name: kafka
#          Image: 195275653332.dkr.ecr.eu-central-1.amazonaws.com/micro-ecommerce-kafka
          Image: apache/kafka:latest
          Essential: true
#          Cpu: 512
#          Memory: 512
          PortMappings:
            - ContainerPort: 29092
              HostPort: 29092
            - ContainerPort: 29093
              HostPort: 29093
          Environment:
            - Name: KAFKA_BROKER_ID
              Value: "1"
            - Name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              Value: "INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
            - Name: KAFKA_ADVERTISED_LISTENERS
#              Value: !Sub "INTERNAL://${KafkaCLB.DNSName}:29092"
              Value: !Sub "INTERNAL://ip-10-0-2-48.eu-central-1.compute.internal:29092"
            - Name: KAFKA_CONTROLLER_QUORUM_VOTERS
              Value: "1@ip-10-0-2-48.eu-central-1.compute.internal.eu-central-1.elb.amazonaws.com:29093"
            - Name: KAFKA_LISTENERS
              Value: "INTERNAL://:29092,CONTROLLER://:29093"
            - Name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              Value: "1"
            - Name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
              Value: "0"
            - Name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              Value: "1"
            - Name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              Value: "1"
            - Name: KAFKA_PROCESS_ROLES
              Value: "broker,controller"
            - Name: KAFKA_NODE_ID
              Value: "1"
            - Name: KAFKA_INTER_BROKER_LISTENER_NAME
              Value: "INTERNAL"
            - Name: KAFKA_CONTROLLER_LISTENER_NAMES
              Value: "CONTROLLER"
            - Name: CLUSTER_ID
              Value: "ecommerce"
            - Name: INITIAL_BROKER_REGISTRATION_TIMEOUT_MS
              Value: "240000"
            - Name: KAFKA_HEAP_OPTS
              Value: "-Xms512m -Xmx512m"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref KafkaLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: kafka
#          HealthCheck:
#            Command: [ "CMD-SHELL", "nc -z localhost 9092" ]
#            Interval: 30
#            Timeout: 5
#            Retries: 5
#    DependsOn:
#      - ECSCluster
#      - ECSAutoScalingGroup
#      - KafkaLogGroup

  KafkaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${Environment}-kafka-logs"
      RetentionInDays: 7
      Tags:
        - Key: Name
          Value: kafka-logs

  KafkaCLB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      LoadBalancerName: !Sub "${Environment}-kafka-clb"
      Scheme: internal
      Subnets:
        - !Ref PrivateSubnet
      SecurityGroups:
        - !Ref KafkaSecurityGroup
      Listeners:
        - Protocol: TCP
          LoadBalancerPort: 29092
          InstanceProtocol: TCP
          InstancePort: 29092
        - Protocol: TCP
          LoadBalancerPort: 29093
          InstanceProtocol: TCP
          InstancePort: 29093
#      HealthCheck:
#        Target: TCP:9092
#        Interval: 30
#        Timeout: 10
#        HealthyThreshold: 3
#        UnhealthyThreshold: 2

  KafkaService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Sub "${Environment}-kafka-service"
      DesiredCount: 1
      LaunchType: EC2
      TaskDefinition: !Ref KafkaTaskDefinition
      LoadBalancers:
#        - LoadBalancerName: !Ref KafkaCLB
#          ContainerName: kafka
#          ContainerPort: 29092
        - LoadBalancerName: !Ref KafkaCLB
          ContainerName: kafka
          ContainerPort: 29093
#      NetworkConfiguration:
#        AwsvpcConfiguration:
#          AssignPublicIp: DISABLED
#          SecurityGroups:
#            - !Ref KafkaSecurityGroup
#          Subnets:
#            - !Ref PrivateSubnet
#    DependsOn:
#      - ECSRole
#      - ECSCluster
#      - KafkaTaskDefinition
#      - ECSAutoScalingGroup

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:*
              StringEquals:
                aws:SourceAccount: !Sub ${AWS::AccountId}
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

#  PostgreSQLSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: Enable access to PostgreSQL database
#      VpcId: !Ref VPC
#      SecurityGroupIngress:
#        - IpProtocol: tcp
#          FromPort: 5432
#          ToPort: 5432
#          CidrIp: 0.0.0.0/0
#      SecurityGroupEgress:
#        - IpProtocol: "-1"
#          FromPort: -1
#          ToPort: -1
#          CidrIp: 0.0.0.0/0

Outputs:

  KafkaClusterName:
    Description: Kafka ECS Cluster Name
    Value: !Ref ECSCluster

  KafkaServiceName:
    Description: Kafka ECS Service Name
    Value: !Ref KafkaService

# Caused by: org.apache.kafka.common.KafkaException: Socket server failed to bind to internal-dev-kafka-clb-1443648838.eu-central-1.elb.amazonaws.com:29093: Address not available.