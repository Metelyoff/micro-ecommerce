name: Raspberry Pi CI/CD

on:
  push:
    branches: [k8s]
    paths:
      - 'inventory-service/**'
      - 'order-service/**'
      - 'payment-service/**'
      - 'webapp/**'
      - '.github/workflows/k8s-actions.yml'

env:
  IMAGE_NAME: metelyoff/micro-ecommerce

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: rpc3s
    strategy:
      matrix:
        service: [ inventory-service, order-service, payment-service, webapp ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-

      - name: Build and push Docker image (${{ matrix.service }})
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          platforms: linux/arm64
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ matrix.service }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

  deploy:
    runs-on: ubuntu-latest
    environment: rpc3s
    needs: build-and-push
    env:
      ORDER_POSTGRES_USER: ${{ secrets.ORDER_POSTGRES_USER }}
      ORDER_POSTGRES_PASSWORD: ${{ secrets.ORDER_POSTGRES_PASSWORD }}
      PAYMENT_POSTGRES_USER: ${{ secrets.PAYMENT_POSTGRES_USER }}
      PAYMENT_POSTGRES_PASSWORD: ${{ secrets.PAYMENT_POSTGRES_PASSWORD }}
      INVENTORY_POSTGRES_USER: ${{ secrets.INVENTORY_POSTGRES_USER }}
      INVENTORY_POSTGRES_PASSWORD: ${{ secrets.INVENTORY_POSTGRES_PASSWORD }}
      CLOUDFLARE_TUNNEL_TOKEN: ${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
      DOMAIN: ${{ secrets.DOMAIN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > ~/.kube/config

      - name: Prepare deployment files
        run: |
          cp k8s-micro-ecommerce.yaml template.yaml
          envsubst \
            '${IMAGE_NAME} ${ORDER_POSTGRES_USER} ${ORDER_POSTGRES_PASSWORD} ${PAYMENT_POSTGRES_USER} ${PAYMENT_POSTGRES_PASSWORD} ${INVENTORY_POSTGRES_USER} ${INVENTORY_POSTGRES_PASSWORD} ${CLOUDFLARE_TUNNEL_TOKEN} ${DOMAIN}' \
            < template.yaml > k8s-micro-ecommerce.yaml

      - name: Use correct kube context
        run: kubectl config use-context github-actions-k3s

      - name: Apply manifest to Raspberry Pi cluster
        run: |
          kubectl apply -f k8s-micro-ecommerce.yaml
