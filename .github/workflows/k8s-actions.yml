name: Raspberry Pi CI/CD

on:
  push:
    branches: [k8s]
    paths:
      - 'inventory-service/**'
      - 'order-service/**'
      - 'payment-service/**'
      - 'webapp/**'
      - '.github/workflows/k8s-actions.yml'

env:
  IMAGE_NAME: metelyoff/micro-ecommerce

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: rpc3s
    strategy:
      matrix:
        service: [ inventory-service, order-service, payment-service, webapp ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker images
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
        run: |
          services=(inventory-service order-service payment-service webapp)
          for service in "${services[@]}"; do
            docker buildx build \
              --platform linux/arm64 \
              --cache-from=type=local,src=/tmp/.buildx-cache \
              --cache-to=type=local,dest=/tmp/.buildx-cache \
              -t $IMAGE_NAME:$service \
              -f $service/Dockerfile \
              --push $service
          done

  deploy:
    runs-on: ubuntu-latest
    environment: rpc3s
    needs: build-and-push
    env:
      ORDER_POSTGRES_USER: ${{ secrets.ORDER_POSTGRES_USER }}
      ORDER_POSTGRES_PASSWORD: ${{ secrets.ORDER_POSTGRES_PASSWORD }}
      PAYMENT_POSTGRES_USER: ${{ secrets.PAYMENT_POSTGRES_USER }}
      PAYMENT_POSTGRES_PASSWORD: ${{ secrets.PAYMENT_POSTGRES_PASSWORD }}
      INVENTORY_POSTGRES_USER: ${{ secrets.INVENTORY_POSTGRES_USER }}
      INVENTORY_POSTGRES_PASSWORD: ${{ secrets.INVENTORY_POSTGRES_PASSWORD }}
      CLOUDFLARE_TUNNEL_TOKEN: ${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
      DOMAIN: ${{ secrets.DOMAIN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > ~/.kube/config

      - name: Install cloudflared
        run: |
          sudo mkdir -p /etc/cloudflared
          echo "${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}" | sudo tee /etc/cloudflared/creds.json > /dev/null

      - name: Prepare deployment files
        run: |
          cp k8s-micro-ecommerce.yaml template.yaml
          envsubst \
            '${IMAGE_NAME} ${ORDER_POSTGRES_USER} ${ORDER_POSTGRES_PASSWORD} ${PAYMENT_POSTGRES_USER} ${PAYMENT_POSTGRES_PASSWORD} ${INVENTORY_POSTGRES_USER} ${INVENTORY_POSTGRES_PASSWORD} ${CLOUDFLARE_TUNNEL_TOKEN} ${DOMAIN}' \
            < template.yaml > k8s-micro-ecommerce.yaml

      - name: Apply manifest to Raspberry Pi cluster
        run: |
          kubectl apply -f k8s-micro-ecommerce.yaml
