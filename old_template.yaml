AWSTemplateFormatVersion: '2010-09-09'
Description: Full-stack deployment with Kafka, Debezium, PostgreSQL, and Spring Boot Microservices on ECS using Docker.

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, production]

Resources:
  # VPC and Subnets
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-vpc"

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-public-subnet-1"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-private-subnet-1"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-internet-gateway"

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-public-route-table"
    DependsOn:
      - InternetGateway

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt PublicElasticIP.AllocationId
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-nat-gateway"
    DependsOn:
      - PublicSubnet1
      - PublicElasticIP

  PublicElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-private-route-table"
    DependsOn:
      - NATGateway

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  # Security group for PostgreSQL
  PostgresSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to PostgreSQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0  # Allow all outbound (or restrict as needed)

  # Security group for ECS Service (or another service)
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow communication to PostgreSQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          DestinationSecurityGroupId: !Ref PostgresSecurityGroup

  # EC2 Instance for PostgreSQL
  PostgresEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: NATGateway
    Properties:
      ImageId: !Sub "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"
      InstanceType: t3.micro  # Free Tier eligible
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref PostgresSecurityGroup
#      KeyName: !Sub "${Environment}-key-pair"  # Ensure you have an existing EC2 key pair for this
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-postgres-ec2-instance"
      UserData: !Base64 |
        #!/bin/bash
        yum update -y

        # Install PostgreSQL
        amazon-linux-extras enable postgresql15
        yum install -y postgresql-server postgresql

        # Initialize PostgreSQL Database
        postgresql-setup initdb

        # Configure PostgreSQL to accept connections from any IPs
        echo "listen_addresses = '*'" >> /var/lib/pgsql/data/postgresql.conf
        echo "host    all             all             0.0.0.0/0               md5" >> /var/lib/pgsql/data/pg_hba.conf
        echo "wal_level = logical" >> /var/lib/pgsql/data/pg_hba.conf
        echo "max_replication_slots = 10" >> /var/lib/pgsql/data/pg_hba.conf
        echo "max_wal_senders = 10" >> /var/lib/pgsql/data/pg_hba.conf

        # Start PostgreSQL Service
        systemctl enable postgresql
        systemctl start postgresql

        # Set PostgreSQL admin password
        sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'your_secure_password';"

        # Create databases for each service
        sudo -u postgres psql <<-EOSQL
          CREATE DATABASE order_service_db;
          CREATE DATABASE payment_service_db;
          CREATE DATABASE inventory_service_db;

          -- Order Service User
          CREATE USER postgres WITH PASSWORD 'postgres';
          GRANT ALL PRIVILEGES ON DATABASE order_service_db TO postgres;

          -- Payment Service User
          CREATE USER postgres WITH PASSWORD 'postgres';
          GRANT ALL PRIVILEGES ON DATABASE payment_service_db TO postgres;

          -- Inventory Service User
          CREATE USER postgres WITH PASSWORD 'postgres';
          GRANT ALL PRIVILEGES ON DATABASE inventory_service_db TO postgres;
        EOSQL

  # IAM Instance Profile for the PostgreSQL instance
  PostgresInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref PostgresRole

  PostgresRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowPostgresAccessToSecrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*"

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${Environment}-ecs-cluster"

  # ECS Security Group
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group for Kafka, Debezium, and Microservices
      VpcId: !Ref VPC
      SecurityGroupIngress:
          # For SSH Access
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          # For Kafka
        - IpProtocol: tcp
          FromPort: 9092
          ToPort: 9092
          CidrIp: 0.0.0.0/0
          # For Debezium
        - IpProtocol: tcp
          FromPort: 8083
          ToPort: 8083
          CidrIp: 0.0.0.0/0
          # For Web
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # EC2 IAM role to allow ECS agent to communicate with ECS
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Path: /

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ECSInstanceRole

  # ECS Launch Template for Kafka, Debezium, and Microservices
  ECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${Environment}-ecs-launch-template"
      LaunchTemplateData:
        InstanceType: t3.micro  # Free Tier eligible
        ImageId: !Sub "{{resolve:ssm:/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id}}"
        SecurityGroupIds:
          - !Ref ECSSecurityGroup
        IamInstanceProfile:
          Name: !Ref ECSInstanceProfile
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            SubnetId: !Ref PublicSubnet1
            Groups:
              - !Ref ServiceSecurityGroup
        UserData: !Base64 |
          #!/bin/bash
          echo ECS_CLUSTER=${ECSCluster.ClusterName} >> /etc/ecs/ecs.config
          yum update -y
          yum install docker -y
          service docker start

  # ECS Auto Scaling Group using Launch Template
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      LaunchTemplate:
        LaunchTemplateId: !Ref ECSLaunchTemplate
        Version: !GetAtt ECSLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-ecs-instance"
          PropagateAtLaunch: true
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300

  # DB Subnet Group for RDS Instances
#  RDSSubnetGroup:
#    Type: AWS::RDS::DBSubnetGroup
#    Properties:
#      DBSubnetGroupDescription: Subnet group for RDS instances
#      SubnetIds:
#        - !Ref PublicSubnet1
#        - !Ref PublicSubnet2
#      Tags:
#        - Key: Name
#          Value: !Sub "${Environment}-rds-subnet-group"

#  RDSPostgresParameterGroup:
#    Type: AWS::RDS::DBParameterGroup
#    Properties:
#      Description: PostgreSQL parameter group for enabling logical replication
#      Family: postgres15
#      Parameters:
#        wal_level: logical
#        max_replication_slots: "10"
#        max_wal_senders: "10"
#      Tags:
#        - Key: Name
#          Value: !Sub "${Environment}-rds-parameter-group"

  # RDS PostgreSQL Instances (Free Tier Eligible)
#  OrderServiceDB:
#    Type: AWS::RDS::DBInstance
#    Properties:
#      DBInstanceClass: db.t4g.micro  # Free Tier eligible
#      AllocatedStorage: "20"
#      Engine: postgres
#      MasterUsername: postgres
#      MasterUserPassword: postgres
#      DBName: order_service_db
#      DBSubnetGroupName: !Ref RDSSubnetGroup
#      VPCSecurityGroups:
#        - !Ref ECSSecurityGroup
#      PubliclyAccessible: false
#      BackupRetentionPeriod: 0  # Disables automatic backups
#      EnablePerformanceInsights: false
#      DBParameterGroupName: !Ref RDSPostgresParameterGroup  # Associate parameter group

#  PaymentServiceDB:
#    Type: AWS::RDS::DBInstance
#    Properties:
#      DBInstanceClass: db.t4g.micro
#      AllocatedStorage: "20"
#      Engine: postgres
#      MasterUsername: postgres
#      MasterUserPassword: postgres
#      DBName: payment_service_db
#      DBSubnetGroupName: !Ref RDSSubnetGroup
#      VPCSecurityGroups:
#        - !Ref ECSSecurityGroup
#      PubliclyAccessible: false
#      BackupRetentionPeriod: 0  # Disables automatic backups
#      EnablePerformanceInsights: false
#      DBParameterGroupName: !Ref RDSPostgresParameterGroup  # Associate parameter group

#  InventoryServiceDB:
#    Type: AWS::RDS::DBInstance
#    Properties:
#      DBInstanceClass: db.t4g.micro
#      AllocatedStorage: "20"
#      Engine: postgres
#      MasterUsername: postgres
#      MasterUserPassword: postgres
#      DBName: inventory_service_db
#      DBSubnetGroupName: !Ref RDSSubnetGroup
#      VPCSecurityGroups:
#        - !Ref ECSSecurityGroup
#      PubliclyAccessible: false
#      BackupRetentionPeriod: 0  # Disables automatic backups
#      EnablePerformanceInsights: false
#      DBParameterGroupName: !Ref RDSPostgresParameterGroup  # Associate parameter group

  # ECS Services for Kafka, Debezium, Microservices, and Web App
  KafkaService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref KafkaTaskDefinition
      DesiredCount: 1
      LaunchType: EC2

  DebeziumService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref DebeziumTaskDefinition
      DesiredCount: 1
      LaunchType: EC2
    DependsOn:
      - KafkaTaskDefinition
      - PrivateRouteTable
      - ServiceSecurityGroup

  #  OrderService:
#    Type: AWS::ECS::Service
#    Properties:
#      Cluster: !Ref ECSCluster
#      TaskDefinition: !Ref OrderServiceTaskDefinition
#      DesiredCount: 1
#      LaunchType: EC2

  #  PaymentService:
#    Type: AWS::ECS::Service
#    Properties:
#      Cluster: !Ref ECSCluster
#      TaskDefinition: !Ref PaymentServiceTaskDefinition
#      DesiredCount: 1
#      LaunchType: EC2
#
#  InventoryService:
#    Type: AWS::ECS::Service
#    Properties:
#      Cluster: !Ref ECSCluster
#      TaskDefinition: !Ref InventoryServiceTaskDefinition
#      DesiredCount: 1
#      LaunchType: EC2
#
#  WebAppService:
#    Type: AWS::ECS::Service
#    Properties:
#      Cluster: !Ref ECSCluster
#      TaskDefinition: !Ref WebAppTaskDefinition
#      DesiredCount: 1
#      LaunchType: EC2

  # ECS Task Definitions for Each Service
  KafkaTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: KafkaTaskDefinition
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !GetAtt KafkaTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: kafka
          Image: apache/kafka:latest
          Memory: 512
          Cpu: 256
          PortMappings:
            - ContainerPort: 9092
              HostPort: 9092
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "${Environment}-kafka-logs"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: kafka
          Environment:
            - Name: KAFKA_BROKER_ID
              Value: "1"
            - Name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              Value: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT"
            - Name: KAFKA_ADVERTISED_LISTENERS
              Value: "PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092"
            - Name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              Value: "1"
            - Name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
              Value: "0"
            - Name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              Value: "1"
            - Name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              Value: "1"
            - Name: KAFKA_PROCESS_ROLES
              Value: "broker,controller"
            - Name: KAFKA_NODE_ID
              Value: "1"
            - Name: KAFKA_CONTROLLER_QUORUM_VOTERS
              Value: "1@kafka:29093"
            - Name: KAFKA_LISTENERS
              Value: "PLAINTEXT://0.0.0.0:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092"
            - Name: KAFKA_INTER_BROKER_LISTENER_NAME
              Value: "PLAINTEXT"
            - Name: KAFKA_CONTROLLER_LISTENER_NAMES
              Value: "CONTROLLER"
            - Name: CLUSTER_ID
              Value: "ecommerce"

  KafkaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${Environment}-kafka-logs"
      RetentionInDays: 7  # Number of days to retain logs
      Tags:
        - Key: Name
          Value: kafka-logs

  KafkaTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: KafkaTaskLoggingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Resource: arn:aws:logs:*:*:*

  DebeziumTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: debezium-task
      NetworkMode: bridge
      RequiresCompatibilities: ["EC2"]
      ContainerDefinitions:
        - Name: debezium
          Image: debezium/connect:2.3
          Memory: 512
          Cpu: 256
          PortMappings:
            - ContainerPort: 8083
          Environment:
            - Name: BOOTSTRAP_SERVERS
              Value: "kafka:29092"
            - Name: GROUP_ID
              Value: "1"
            - Name: CONFIG_STORAGE_TOPIC
              Value: "debezium_config"
            - Name: OFFSET_STORAGE_TOPIC
              Value: "debezium_offsets"
            - Name: STATUS_STORAGE_TOPIC
              Value: "debezium_status"
            - Name: KEY_CONVERTER_SCHEMAS_ENABLE
              Value: "false"
            - Name: VALUE_CONVERTER_SCHEMAS_ENABLE
              Value: "false"
            - Name: CONNECT_KEY_CONVERTER
              Value: "org.apache.kafka.connect.json.JsonConverter"
            - Name: CONNECT_VALUE_CONVERTER
              Value: "org.apache.kafka.connect.json.JsonConverter"

#  OrderServiceTaskDefinition:
#    Type: AWS::ECS::TaskDefinition
#    Properties:
#      Family: order-service-task
#      Cpu: '256'
#      Memory: '512'
#      NetworkMode: bridge
#      RequiresCompatibilities:
#        - EC2
#      ContainerDefinitions:
#        - Name: order-service
#          Image: 195275653332.dkr.ecr.eu-central-1.amazonaws.com/micro-ecommerce-order-service:latest
#          Memory: 512
#          Cpu: 256
#          PortMappings:
#            - ContainerPort: 8080
#              HostPort: 8080
#              Protocol: tcp
#          Essential: true
#          Environment:
#            - Name: DATABASE_URL
#              Value: !GetAtt PostgresEC2Instance.PrivateDnsName
#            - Name: DATABASE_USERNAME
#              Value: "postgres"
#            - Name: DATABASE_PASSWORD
#              Value: "postgres"
#            - Name: KAFKA_URI
#              Value: "kafka:29092"
#            - Name: DEBEZIUM_DESTINATION
#              Value: "order-service.public.outbox_events"
#            - Name: OUTBOX_TOPICS
#              Value: "payment-service.public.outbox_events,inventory-service.public.outbox_events"
#
#  PaymentServiceTaskDefinition:
#    Type: AWS::ECS::TaskDefinition
#    Properties:
#      Family: payment-service-task
#      Cpu: '256'
#      Memory: '512'
#      NetworkMode: bridge
#      RequiresCompatibilities:
#        - EC2
#      ContainerDefinitions:
#        - Name: payment-service
#          Image: 195275653332.dkr.ecr.eu-central-1.amazonaws.com/micro-ecommerce-payment-service:latest
#          Memory: 512
#          Cpu: 256
#          Essential: true
#          PortMappings:
#            - ContainerPort: 8081
#          Environment:
#            - Name: DATABASE_URL
#              Value: "jdbc:postgresql://payment-service-db:5434/payment_service_db"
#            - Name: DATABASE_USERNAME
#              Value: "postgres"
#            - Name: DATABASE_PASSWORD
#              Value: "postgres"
#            - Name: KAFKA_URI
#              Value: "kafka:29092"
#            - Name: DEBEZIUM_DESTINATION
#              Value: "payment-service.public.outbox_events"
#            - Name: OUTBOX_TOPICS
#              Value: "order-service.public.outbox_events,inventory-service.public.outbox_events"
#            - Name: EXPIRE_DELAY_MILLIS
#              Value: "60000"
#
#  InventoryServiceTaskDefinition:
#    Type: AWS::ECS::TaskDefinition
#    Properties:
#      Family: inventory-service-task
#      NetworkMode: bridge
#      Cpu: '256'
#      Memory: '512'
#      RequiresCompatibilities:
#        - EC2
#      ContainerDefinitions:
#        - Name: inventory-service
#          Image: 195275653332.dkr.ecr.eu-central-1.amazonaws.com/micro-ecommerce-inventory-service:latest
#          Memory: 512
#          Cpu: 256
#          PortMappings:
#            - ContainerPort: 8082
#          Essential: true
#          Environment:
#            - Name: DATABASE_URL
#              Value: "jdbc:postgresql://inventory-service-db:5435/inventory_service_db"
#            - Name: DATABASE_USERNAME
#              Value: "postgres"
#            - Name: DATABASE_PASSWORD
#              Value: "postgres"
#            - Name: KAFKA_URI
#              Value: "kafka:29092"
#            - Name: DEBEZIUM_DESTINATION
#              Value: "inventory-service.public.outbox_events"
#            - Name: OUTBOX_TOPICS
#              Value: "order-service.public.outbox_events,payment-service.public.outbox_events"
#
#  WebAppTaskDefinition:
#    Type: AWS::ECS::TaskDefinition
#    Properties:
#      Family: web-app-task
#      Cpu: '256'
#      Memory: '512'
#      NetworkMode: bridge
#      RequiresCompatibilities:
#        - EC2
#      ContainerDefinitions:
#        - Name: web-app
#          Image: 195275653332.dkr.ecr.eu-central-1.amazonaws.com/micro-ecommerce-web:latest
#          Memory: 512
#          Cpu: 256
#          PortMappings:
#            - ContainerPort: 80
#          Essential: true
#          Environment:
#            - Name: REACT_APP_PRODUCTS_API_URL
#              Value: "http://localhost:8084"
#            - Name: REACT_APP_ORDERS_API_URL
#              Value: "http://localhost:8086"
#            - Name: REACT_APP_PAYMENTS_API_URL
#              Value: "http://localhost:8085"

Outputs:
  ECSClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref ECSCluster

  KafkaServiceEndpoint:
    Description: Kafka service endpoint (EC2-based)
    Value: !GetAtt KafkaService.Name

# aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 195275653332.dkr.ecr.eu-central-1.amazonaws.com

# Order
# aws ecr create-repository --repository-name micro-ecommerce-order-service --region eu-central-1
# docker tag micro-ecommerce-order-service:latest 195275653332.dkr.ecr.eu-central-1.amazonaws.com/micro-ecommerce-order-service:latest
# docker push 195275653332.dkr.ecr.eu-central-1.amazonaws.com/micro-ecommerce-order-service:latest

# Payment
# aws ecr create-repository --repository-name micro-ecommerce-payment-service --region eu-central-1
# docker tag micro-ecommerce-payment-service:latest 195275653332.dkr.ecr.eu-central-1.amazonaws.com/micro-ecommerce-payment-service:latest
# docker push 195275653332.dkr.ecr.eu-central-1.amazonaws.com/micro-ecommerce-payment-service:latest

# Inventory
# aws ecr create-repository --repository-name micro-ecommerce-inventory-service --region eu-central-1
# docker tag micro-ecommerce-inventory-service:latest 195275653332.dkr.ecr.eu-central-1.amazonaws.com/micro-ecommerce-inventory-service:latest
# docker push 195275653332.dkr.ecr.eu-central-1.amazonaws.com/micro-ecommerce-inventory-service:latest

# Web
# aws ecr create-repository --repository-name micro-ecommerce-web --region eu-central-1
# docker tag micro-ecommerce-web:latest 195275653332.dkr.ecr.eu-central-1.amazonaws.com/micro-ecommerce-web:latest
# docker push 195275653332.dkr.ecr.eu-central-1.amazonaws.com/micro-ecommerce-web:latest

# Kafka
# aws ecr create-repository --repository-name micro-ecommerce-kafka --region eu-central-1
# docker tag apache/kafka:latest 195275653332.dkr.ecr.eu-central-1.amazonaws.com/micro-ecommerce-kafka:latest
# docker push 195275653332.dkr.ecr.eu-central-1.amazonaws.com/micro-ecommerce-kafka:latest

# aws ecr list-images --repository-name <repository-name> --region eu-central-1

# Create
# aws cloudformation create-stack --stack-name micro-ecommerce --template-body file://template.yaml --region eu-central-1 --capabilities CAPABILITY_NAMED_IAM

# Deploy
# aws cloudformation deploy --template-file template.yaml --stack-name micro-ecommerce --capabilities CAPABILITY_NAMED_IAM

# Update
# aws cloudformation update-stack --stack-name micro-ecommerce --template-body file://template.yaml --region eu-central-1

# Describe
# aws cloudformation describe-stacks --stack-name micro-ecommerce --region eu-central-1

# Delete
# aws cloudformation delete-stack --stack-name micro-ecommerce --region eu-central-1
